// <auto-generated />
using System;
using MedicalInformationSystem.ApiService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalInformationSystem.ApiService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250913172313_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalInformationSystem.ApiService.Models.AppointmentEntity", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentId"));

                    b.Property<string>("Complaints")
                        .HasColumnType("text")
                        .HasColumnName("complaints");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text")
                        .HasColumnName("diagnosis");

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("integer")
                        .HasColumnName("disease_id");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    b.Property<DateTimeOffset?>("FollowUpDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("follow_up_date");

                    b.Property<int?>("PatientEntityPatientId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<string>("Prescriptions")
                        .HasColumnType("text")
                        .HasColumnName("prescriptions");

                    b.Property<string>("Recommendations")
                        .HasColumnType("text")
                        .HasColumnName("recommendations");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTimeOffset>("VisitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("visit_date");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientEntityPatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("MedicalInformationSystem.ApiService.Models.DiseaseEntity", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("disease_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiseaseId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IcdCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icd_code");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_chronic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Symptoms")
                        .HasColumnType("text")
                        .HasColumnName("symptoms");

                    b.Property<string>("Treatment")
                        .HasColumnType("text")
                        .HasColumnName("treatment");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("DiseaseId");

                    b.ToTable("disease");
                });

            modelBuilder.Entity("MedicalInformationSystem.ApiService.Models.DoctorEntity", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("doctor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DoctorId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OfficeNumber")
                        .HasColumnType("text")
                        .HasColumnName("office_number");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WorkSchedule")
                        .HasColumnType("text")
                        .HasColumnName("work_schedule");

                    b.HasKey("DoctorId");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("MedicalInformationSystem.ApiService.Models.PatientEntity", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<int>("PolicyNumber")
                        .HasColumnType("integer")
                        .HasColumnName("policy_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("PatientId");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("MedicalInformationSystem.ApiService.Models.AppointmentEntity", b =>
                {
                    b.HasOne("MedicalInformationSystem.ApiService.Models.DiseaseEntity", null)
                        .WithMany()
                        .HasForeignKey("DiseaseId");

                    b.HasOne("MedicalInformationSystem.ApiService.Models.DoctorEntity", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalInformationSystem.ApiService.Models.PatientEntity", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PatientEntityPatientId");

                    b.HasOne("MedicalInformationSystem.ApiService.Models.PatientEntity", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalInformationSystem.ApiService.Models.PatientEntity", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
